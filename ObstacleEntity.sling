class is SpriteEntity imports cave imports cape imports motion:

var gameScene as GameScene
var obstacleSprite as TextureSprite
var obstacleTexture as Texture
var height as double
var width as double
var movementX as double
var movementY as double
var x as double

func createSprite override as Sprite
{
	gameScene = getScene() as GameScene
	height = gameScene.getReferenceHeight()
	width = gameScene.getReferenceWidth()
	var rand = new Random()
	obstacleTexture = gameScene.createTextureForImageResource("obstacle")
	obstacleSprite = gameScene.addTextureSpriteForSize(obstacleTexture, 0.15 * width, 0.05 * height)
	x = (0.9) * rand.nextDouble()
	obstacleSprite.move(x * width - obstacleSprite.getWidth() / 2, height - obstacleSprite.getHeight())
	return (obstacleSprite)
}

func cleanup override
{
	gameScene.removeAllSprites()
}

func hasTouched as bool
{
	var obstacleY = obstacleSprite.getY()
	var asteroidEntity = gameScene.getPlayerEntity()
	var asteroidY = asteroidEntity.getY() + asteroidEntity.getHeight()
	PRINT ((obstacleSprite.getX() > asteroidEntity.getX()))
	return ((asteroidY > obstacleY) && (asteroidY < (obstacleSprite.getY() + obstacleSprite.getHeight())) && (obstacleSprite.getX() < asteroidEntity.getX() + asteroidEntity.getWidth() * 0.5) && (obstacleSprite.getX() + obstacleSprite.getWidth()) > (asteroidEntity.getX() + asteroidEntity.getWidth() * 0.5 ))
}

func isOutOfScreen as bool
{
	return obstacleSprite.getY() + obstacleSprite.getHeight() < 0
}

func tick(gameTime as TimeValue, delta as double) override
{
	if (hasTouched()) {
		var player = gameScene.getPlayerEntity()
		PRINT (obstacleSprite.getY())
		player.setMovementY(obstacleSprite.getY() - obstacleSprite.getHeight() - player.getHeight())
		player.setHasTouchObstacle(true)
	}
	else if (!hasTouched()) {
		gameScene.getPlayerEntity().setHasTouchObstacle(false)
	}
	if (isOutOfScreen()) {
		gameScene.removeSpriteFromScene(this)
		// gameScene.removeAllSprites()
	}
	base.tick(gameTime, delta)
	movementY = obstacleSprite.getY()
	movementX = obstacleSprite.getX()
	movementY -= delta * 0.2
	obstacleSprite.move(movementX, movementY)
}
