class is SpriteEntity is PointerListener is KeyListener imports cave imports cape imports motion:

var gameScene as GameScene
var playerSprite as TextureSprite
var playerTexture as Texture
var height as double
var width as double
var pointerX as double
var pointerY as double
var movementX as double
var movementY as double
var mouseClick = false
var leftPressed = false
var rightPressed = false
var downPressed = false
var tapLeft = false
var tapRight = false
var hasTouchObstacle = false
var tickCounter = 0
var speed = 5.0
var life = 3
// var timer = new TimeValue()

func createSprite override as Sprite
{
	gameScene = getScene() as GameScene
	height = gameScene.getReferenceHeight()
	width = gameScene.getReferenceWidth()
	playerTexture = gameScene.createTextureForImageResource("player")
	playerSprite = gameScene.addTextureSpriteForSize(playerTexture, 0.1 * width, 0.1 * width)
	movementX = (0.5 * width - (playerSprite.getWidth() * 0.5))
	movementY = 0
	playerSprite.move(movementX, movementY)
	return (playerSprite)
}

func cleanup override
{
	layer.removeSprite(playerSprite)
}

func onPointerEvent(event as PointerEvent) as bool
{
	pointerX = event.x
	pointerY = event.y
	var arrowLeft = gameScene.getControlsEntity().getArrowLeftButton()
	var arrowRight = gameScene.getControlsEntity().getArrowRightButton()
	if (event.action == PointerEvent.DOWN) {
		if (event.isInside(arrowLeft.getX(), arrowLeft.getY(), arrowLeft.getWidth(), arrowLeft.getHeight())) {
			tapLeft = true
		}
		if (event.isInside(arrowRight.getX(), arrowRight.getY(), arrowRight.getWidth(), arrowRight.getHeight())) {
			tapRight = true
		}
	}
	if (event.action == PointerEvent.UP) {
		tapLeft = false
		tapRight = false
	}
	return false
}

func onKeyEvent(event as KeyEvent)
{
	movementX = playerSprite.getX()
	movementY = playerSprite.getY()
	if (event.getAction() == KeyEvent.ACTION_UP) {
		leftPressed = false
		rightPressed = false
		downPressed = false
	}
	if (event.isKey(KeyEvent.KEY_LEFT)) {
		if(event.isKeyPress(KeyEvent.KEY_LEFT)) {
			leftPressed = true
		}
	}
	else if (event.isKey(KeyEvent.KEY_RIGHT)) {
		if(event.isKeyPress(KeyEvent.KEY_RIGHT)) {
			rightPressed = true
		}
	}
	else if (event.isKey(KeyEvent.KEY_DOWN)) {
		if(event.isKeyPress(KeyEvent.KEY_DOWN)) {
			downPressed = true
		}
	}
}

func isOutOfScreen as bool
{
	return playerSprite.getY() + playerSprite.getHeight() / 2 > height || playerSprite.getY() + playerSprite.getHeight() < 0
}

func respawn
{
	movementX = 0.5 * width - playerSprite.getWidth() / 2
	movementY = 0
	life = life - 1
}

func tick (gameTime as TimeValue, delta as double) override
{
	base.tick(gameTime, delta)
	tickCounter = tickCounter + 1
	if (tickCounter % 280 == 0) {
		if (speed > 3.0) {
			speed -= 0.5
			PRINT ("incrementing speed")
		}
		else {
			speed = 3.0
		}
	}
	movementX = playerSprite.getX()
	if (isOutOfScreen()) {
		respawn()
	}
	if (life < 0) {
		gameScene.gameOver()
	}
	if (movementX > width) {
		movementX = 0
	}
	else if (movementX + playerSprite.getWidth() < 0) {
		movementX = width
	}
	if (leftPressed || tapLeft) {
		movementX -= 0.01
	}
	else if (rightPressed || tapRight) {
		movementX += 0.01
	}
	else if (downPressed && !hasTouchObstacle) {
		movementY += 0.01
	}
	// if (!hasTouchObstacle) {
	movementY += delta / speed
	// }
	if (mouseClick) {
		movementX -= (playerSprite.getX() - ((pointerX + playerSprite.getWidth() / 2) - 0.0005 * playerSprite.getWidth())) / 15
	}
	playerSprite.move(movementX, movementY)
}

func setMovementY (n as double)
{
	movementY = n
}

func setHasTouchObstacle (n as boolean)
{
	hasTouchObstacle = n
}

func getLife as int
{
	return(life)
}

func setLife(n as int)
{
	life = n
}
